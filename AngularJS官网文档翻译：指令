https://docs.angularjs.org/guide/directive

Creating Custom Directives
创建自定义指令

What are Directives?
什么是指令
At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS's HTML compiler ($compile) to attach a specified behavior to that DOM element or even transform the DOM element and its children.
在一个比较高的层次上来说，指令是DOM元素（比如作为属性、元素名、注释或类名）上的标记，用来告诉angular的HTML编译器在这个DOM元素上添加一些指定行为，甚至改造这个DOM元素以及它的子元素。
Angular comes with a set of these directives built-in, like ngBind, ngModel, and ngClass. 
angular有一些内置的指令，比如ngBind、ngClass、ngModel。
Much like you create controllers and services, you can create your own directives for Angular to use. 
就像你在创建控制器和服务时一样，你能创建你自己的指令让angular去使用。
When Angular bootstraps your application, the HTML compiler traverses the DOM matching directives against the DOM elements.
当angular引导你的应用时，HTML编译器就会在DOM元素和指令之间建立映射。
What does it mean to "compile" an HTML template? 
什么是HTML模板的编译？
For AngularJS, "compilation" means attaching event listeners to the HTML to make it interactive. 
对于angularjs来说，编译意味着在HTML上添加事件监听，使它能够进行互动。
The reason we use the term "compile" is that the recursive process of attaching directives mirrors the process of compiling source code in compiled programming languages.
我们使用“编译”这个词的原因在于，添加指令的这个递归过程借鉴于编译型程序语言编译源代码的过程。

Directive types
指令有哪些类型
$compile can match directives based on element names, attributes, class names, as well as comments.
指令可以基于元素名、属性、类型，以及注释
Best Practice: Prefer using directives via tag name and attributes over comment and class names.
最佳实践：最好使用元素名或属性，而不是注释和类名来定义指令。
Doing so generally makes it easier to determine what directives a given element matches.
这样做的话，通常来说会使得确定哪个指令和给定元素相匹配的过程更容易。

Creating Directives
创建指令
First let's talk about the API for registering directives. 
首先让我们看下注册指令的API。
Much like controllers, directives are registered on modules. 
和控制器一样，指令被注册给模块。
To register a directive, you use the module.directive API. 
使用module.directive API来注册指令。
module.directive takes the normalized directive name followed by a factory function. 
module.directive接受一个标准化的指令名称，后面跟着一个工厂方法。
This factory function should return an object with the different options to tell $compile how the directive should behave when matched.
工厂方法应该返回一个对象，对象有许多不同的设置选项，来告诉编译器当这个指令被匹配时，指令的行为是怎么样的。

The factory function is invoked only once when the compiler matches the directive for the first time. 
只有在编译器第一次匹配指令时，工厂方法才被调用。
You can perform any initialization work here. 
你可以在此时做任何的初始化的工作。
The function is invoked using $injector.invoke which makes it injectable just like a controller.
工厂方法被$injector.invoke调用，所以它可以像控制器一样，可以使用依赖注入。

Best Practice: Prefer using the definition object over returning a function.
最佳实践：返回对象好过返回一个方法。
We'll go over a few common examples of directives, then dive deep into the different options and compilation process.
我们来看一些普通的指令的例子，然后再深入到不同的选项和编译过程中。
Best Practice: In order to avoid collisions with some future standard, it's best to prefix your own directive names.
最佳实践：为了避免和未来的标准发生冲突，自定义指令最好加上你独特的前缀。
Similarly, do not prefix your own directives with ng or they might conflict with directives included in a future version of Angular.
同样的，不要用ng来前缀你的自定义指令，这样有可能会和未来的angular版本中的内置指令相冲突。
For the following examples, we'll use the prefix my.
在下面的例子中，我们使用my来做前缀。

Template-expanding directive
模板扩展指令
Let's say you have a chunk of your template that represents a customer's information.
我们需要一块模板，来显示客户的信息。
This template is repeated many times in your code. 
这个模板在代码里会出现在好多地方。
When you change it in one place, you have to change it in several others. 
当发生更改时，就必须同时更改好几个地方。
This is a good opportunity to use a directive to simplify your template.
这是使用指令去简化你的模板的好机会。

Let's create a directive that simply replaces its contents with a static template:
我们来创建一个指令，用一个静态模板来替换内容：
angular.module('docsSimpleDirective', [])
.controller('Controller', ['$scope', function($scope) {
  $scope.customer = {
    name: 'Naomi',
    address: '1600 Amphitheatre'
  };
}])
.directive('myCustomer', function() {
  return {
    template: 'Name: {{customer.name}} Address: {{customer.address}}'
  };
});
<div ng-controller="Controller">
  <div my-customer></div>
</div>

Notice that we have bindings in this directive. 
注意我们在指令中使用了数据绑定。
After $compile compiles and links <div my-customer></div>, it will try to match directives on the element's children.
在编译器编译和链接了<div my-customer></div>之后，它会试着在子元素上匹配指令。
This means you can compose directives of other directives. 
这意味着，你可以在一个指令中组合其他的指令。

In the example above we in-lined the value of the template option, but this will become annoying as the size of your template grows.
在上面的例子中，我们使用了内联模板选项，这会造成恼人的模板尺寸变大的问题。

Best Practice: Unless your template is very small, it's typically better to break it apart into its own HTML file and load it with the templateUrl option.
最佳实践：除非你的模板很小，否则通常来说，把它们放到一个单独的HTML文件，用templateUrl选项来加载它们比较好。
If you are familiar with ngInclude, templateUrl works just like it. Here's the same example using templateUrl instead:
如果你熟悉ngInclude，templateUrl和它很相像。这是使用templateUrl的例子：
angular.module('docsTemplateUrlDirective', [])
.controller('Controller', ['$scope', function($scope) {
  $scope.customer = {
    name: 'Naomi',
    address: '1600 Amphitheatre'
  };
}])
.directive('myCustomer', function() {
  return {
    templateUrl: 'my-customer.html'
  };
});
--------
Name: {{customer.name}} Address: {{customer.address}}
--------
<div ng-controller="Controller">
  <div my-customer></div>
</div>

templateUrl can also be a function which returns the URL of an HTML template to be loaded and used for the directive. 
templateUrl也能够是一个方法，它返回HTML模板的URL。
Angular will call the templateUrl function with two parameters: the element that the directive was called on, and an attr object associated with that element.
Angular会用两个参数来调用templateUrl方法：指令在上面执行的那个元素、以及这个元素关联的属性的对象
Note: You do not currently have the ability to access scope variables from the templateUrl function, since the template is requested before the scope is initialized.
注意：目前，你还没有访问templateUrl方法的作用域的权限，因为模板的请求先于作用域的初始化。
angular.module('docsTemplateUrlDirective', [])
.controller('Controller', ['$scope', function($scope) {
  $scope.customer = {
    name: 'Naomi',
    address: '1600 Amphitheatre'
  };
}])
.directive('myCustomer', function() {
  return {
    templateUrl: function(elem, attr){
      return 'customer-'+attr.type+'.html';
    }
  };
});
------
Name: {{customer.name}}
Address: {{customer.address}}
------
<div ng-controller="Controller">
  <div my-customer type="name"></div>
  <div my-customer type="address"></div>
</div>

Note: When you create a directive, it is restricted to attribute and elements only by default. 
注意：当你创建一个指令时，默认是使用属性和元素。
In order to create directives that are triggered by class name, you need to use the restrict option.
为了创建类名的指令，你需要改变restrict选项。
The restrict option is typically set to:
restrict选项可以被设置为：
'A' - only matches attribute name 属性
'E' - only matches element name   元素
'C' - only matches class name     类名
These restrictions can all be combined as needed:
restrict选项也可以组合来使用：
'AEC'
“AEC”

When should I use an attribute versus an element?
怎么选择到底是使用属性模式还是元素模式？
Use an element when you are creating a component that is in control of the template. 
当你创建一个完全控制模板的组件时，使用元素模式。
The common case for this is when you are creating a Domain-Specific Language for parts of your template. 
这样做的理由是，你是在给你的模板创建一种领域特定语言。
Use an attribute when you are decorating an existing element with new functionality.
而当你是在给一个已存在的元素添加一些新功能时，使用属性。
Using an element for the myCustomer directive is clearly the right choice because you're not decorating an element with some "customer" behavior; 
在我们的myCistomer指令中，使用元素模式是更好的选择，因为我们并不是给什么customer元素扩展行为；
you're defining the core behavior of the element as a customer component.
我们是在给客户信息组件定义核心行为。

Isolating the Scope of a Directive
隔离指令的作用域
Our myCustomer directive above is great, but it has a fatal flaw. 
我们的myCistomer指令还不错，但它其实有一个致命的缺陷。
We can only use it once within a given scope.
对于一个给定的作用域，我们只能使用它一次。

In its current implementation, we'd need to create a different controller each time in order to re-use such a directive:
对于当前的实现来说，我们必须每次都创建一个不同的控制器来重用这个指令：
angular.module('docsScopeProblemExample', [])
.controller('NaomiController', ['$scope', function($scope) {
  $scope.customer = {
    name: 'Naomi',
    address: '1600 Amphitheatre'
  };
}])
.controller('IgorController', ['$scope', function($scope) {
  $scope.customer = {
    name: 'Igor',
    address: '123 Somewhere'
  };
}])
.directive('myCustomer', function() {
  return {
    restrict: 'E',
    templateUrl: 'my-customer.html'
  };
});
---------
Name: {{customer.name}} Address: {{customer.address}}
---------
<div ng-controller="NaomiController">
  <my-customer></my-customer>
</div>
<hr>
<div ng-controller="IgorController">
  <my-customer></my-customer>
</div>

This is clearly not a great solution.
这显然不是一个好的解决方案。

What we want to be able to do is separate the scope inside a directive from the scope outside, and then map the outer scope to a directive's inner scope.
我们要做的，是需要分离指令内部的作用域和指令外部的作用域，然后把外部作用域和指令内部的作用域联系起来。
We can do this by creating what we call an isolate scope.
我们用隔离作用域来实现这件事。
To do this, we can use a directive's scope option:
我们需要使用指令的作用域选项：
angular.module('docsIsolateScopeDirective', [])
.controller('Controller', ['$scope', function($scope) {
  $scope.naomi = { name: 'Naomi', address: '1600 Amphitheatre' };
  $scope.igor = { name: 'Igor', address: '123 Somewhere' };
}])
.directive('myCustomer', function() {
  return {
    restrict: 'E',
    scope: {
      customerInfo: '=info'
    },
    templateUrl: 'my-customer-iso.html'
  };
});
---------
Name: {{customerInfo.name}} Address: {{customerInfo.address}}
---------
<div ng-controller="Controller">
  <my-customer info="naomi"></my-customer>
  <hr>
  <my-customer info="igor"></my-customer>
</div>

Looking at index.html, the first <my-customer> element binds the info attribute to naomi, which we have exposed on our controller's scope. 
看一下index.html，第一个<my-customer>元素的info属性和naomi绑定，naomi在我们的控制器的作用域内暴露出来。
The second binds info to igor.
另一个绑定给了igor。
Let's take a closer look at the scope option:
让我们仔细看一下作用域选项：
//...
scope: {
  customerInfo: '=info'
},
//...
The scope option is an object that contains a property for each isolate scope binding. 
作用域选项是一个对象，包含了给每一个隔离作用域绑定所定义的属性。
In this case it has just one property:
在这个例子里，它只有一个属性：
   Its name (customerInfo) corresponds to the directive's isolate scope property customerInfo.
   它的名字(customerInfo)对应着指令的隔离作用域的属性customerInfo。
   Its value (=info) tells $compile to bind to the info attribute.
   它的值(=info)告诉编译器，去绑定叫info的attribute。
Note: These =attr attributes in the scope option of directives are normalized just like directive names.
注意：指令的作用域选项里的=attr属性被设置为很像指令的名字。
To bind to the attribute in <div bind-to-this="thing">, you'd specify a binding of =bindToThis.
为了绑定<div bind-to-this="thing">，你需要将其命名为=bindToThis。
For cases where the attribute name is the same as the value you want to bind to inside the directive's scope, you can use this shorthand syntax:
如果，要绑定的隔离作用域里的值和属性名完全一样的话，你可以用这样的简写语法：
...
scope: {
  // same as '=customer'
  customer: '='
},
...
Besides making it possible to bind different data to the scope inside a directive, using an isolated scope has another effect.
除了绑定不同的数据到指令内部的隔离作用域上使用隔离作用域还有别的作用。

We can show this by adding another property, vojta, to our scope and trying to access it from within our directive's template:
我们可以增加另外一个属性，vojta，到我们的作用域里，然后在我们的指令的模板里访问它来展示这个作用：
angular.module('docsIsolationExample', [])
.controller('Controller', ['$scope', function($scope) {
  $scope.naomi = { name: 'Naomi', address: '1600 Amphitheatre' };
  $scope.vojta = { name: 'Vojta', address: '3456 Somewhere Else' };
}])
.directive('myCustomer', function() {
  return {
    restrict: 'E',
    scope: {
      customerInfo: '=info'
    },
    templateUrl: 'my-customer-plus-vojta.html'
  };
});
-----
Name: {{customerInfo.name}} Address: {{customerInfo.address}}
<hr>
Name: {{vojta.name}} Address: {{vojta.address}}
-----
<div ng-controller="Controller">
  <my-customer info="naomi"></my-customer>
</div>

Notice that {{vojta.name}} and {{vojta.address}} are empty, meaning they are undefined. 
注意{{vojta.name}} 和 {{vojta.address}}将显示为空，代表它们是未定义的。
Although we defined vojta in the controller, it's not available within the directive.
尽管我们在控制器里定义了vojta，但它在指令中是不可访问的。
As the name suggests, the isolate scope of the directive isolates everything except models that you've explicitly added to the scope: {} hash object. 
顾名思义，指令的隔离作用域隔离了所有东西，除了你在scope对象里明确添加的那些。
This is helpful when building reusable components because it prevents a component from changing your model state except for the models that you explicitly pass in.
这在构建可复用的组件时是很有用的，因为它防止了组件改变你的model的状态，除非这些model是你明确引入的。 

Note: Normally, a scope prototypically inherits from its parent.
注意：通常来说，一个作用域原型继承于他的父级作用域。
An isolated scope does not. 
但一个隔离作用域不是这样。
Best Practice: Use the scope option to create isolate scopes when making components that you want to reuse throughout your app.
最佳实践：如果你要构建在你的app里的可复用组件的话，就在作用域选项里使用隔离作用域。

Creating a Directive that Manipulates the DOM
构建操作DOM的指令
In this example we will build a directive that displays the current time. 
在这个例子里，我们要构建一个显示当前时间的指令。
Once a second, it updates the DOM to reflect the current time.
每秒更新DOM来显示当前时间。

Directives that want to modify the DOM typically use the link option. 
通常使用link选项来让指令修改DOM。
link takes a function with the following signature, function link(scope, element, attrs) { ... } where:
link返回一个方法，签名为：function link(scope, element, attrs) { ... }
scope is an Angular scope object.
scope是一个angular作用域对象。
element is the jqLite-wrapped element that this directive matches.
element是指令匹配的那个元素的jqLite对象。
attrs is a hash object with key-value pairs of normalized attribute names and their corresponding attribute values.
attrs是指令修饰的元素里的属性的key-value键值对形式的对象。

In our link function, we want to update the displayed time once a second, 
在我们的link方法中，我们希望每秒更新一下显示时间，
or whenever a user changes the time formatting string that our directive binds to. 
用户也可以改变指令里绑定的时间显示格式。
We will use the $interval service to call a handler on a regular basis. 
我们使用$interval服务来执行定期调用。
This is easier than using $timeout.
这要比使用$timeout容易，
We also want to remove the $interval if the directive is deleted so we don't introduce a memory leak.
我们还需要在指令被删除时移除$interval以防止内存泄露。
angular.module('docsTimeDirective', [])
.controller('Controller', ['$scope', function($scope) {
  $scope.format = 'M/d/yy h:mm:ss a';
}])
.directive('myCurrentTime', ['$interval', 'dateFilter', function($interval, dateFilter) {
    function link(scope, element, attrs) {
    var format,
        timeoutId;
    function updateTime() {
      element.text(dateFilter(new Date(), format));
    }
    scope.$watch(attrs.myCurrentTime, function(value) {
      format = value;
      updateTime();
    });
    element.on('$destroy', function() {
      $interval.cancel(timeoutId);
    });
    // start the UI update process; save the timeoutId for canceling
    timeoutId = $interval(function() {
      updateTime(); // update DOM
    }, 1000);
  }
  return {
    link: link
  };
}]);
<div ng-controller="Controller">
  Date format: <input ng-model="format"> <hr/>
  Current time is: <span my-current-time="format"></span>
</div>

There are a couple of things to note here. 
这里有许多值得注意的事情。
Just like the module.controller API, the function argument in module.directive is dependency injected. 
和module.controller API一样，module.directive的方法参数可以被依赖注入。
Because of this, we can use $interval and dateFilter inside our directive's link function.
所以，我们把$interval和dateFilter注入进指令的link方法。
We register an event element.on('$destroy', ...). 
我们注册了一个事件在element.on('$destroy', ...)上面。

Best Practice: Directives should clean up after themselves. 
最佳实践：指令结束时需要做清理。
You can use element.on('$destroy', ...) or scope.$on('$destroy', ...) to run a clean-up function when the directive is removed.
在指令被移除时，你可以使用element.on('$destroy', ...) 或 scope.$on('$destroy', ...)来运行清理方法。

Creating a Directive that Wraps Other Elements
创建包含其他元素的指令
We've seen that you can pass in models to a directive using the isolate scope, 
我们已经看过了把一个model传到使用了隔离作用域的指令中，
but sometimes it's desirable to be able to pass in an entire template rather than a string or an object. 
不过有时，传递一个完整的模板要好过传递一个字符串或者一个对象。
Let's say that we want to create a "dialog box" component. 
我们试着创建一个对话框组件。
The dialog box should be able to wrap any arbitrary content.
这个对话框要可以包含任意的内容。

To do this, we need to use the transclude option.
为了实现这个，我们需要使用transclude选项。
angular.module('docsTransclusionDirective', [])
.controller('Controller', ['$scope', function($scope) {
  $scope.name = 'Tobias';
}])
.directive('myDialog', function() {
  return {
    restrict: 'E',
    transclude: true,
    templateUrl: 'my-dialog.html'
  };
});
------------
<div class="alert" ng-transclude>
</div>
------------
<div ng-controller="Controller">
  <my-dialog>Check out the contents, {{name}}!</my-dialog>
</div>

What does this transclude option do, exactly? 
transclude选项做了什么？
transclude makes the contents of a directive with this option have access to the scope outside of the directive rather than inside.
transclide使得可以访问外部作用域而不是内部作用域来得到指令需要显示的内容。

To illustrate this, see the example below. 
为了说明这点，看下面的例子。
Notice that we've added a link function in script.js that redefines name as Jeff. 
注意我们添加了一个link方法，里面用Jeff来重定义了name。
What do you think the {{name}} binding will resolve to now?
你认为name会显示什么？
angular.module('docsTransclusionExample', [])
.controller('Controller', ['$scope', function($scope) {
  $scope.name = 'Tobias';
}])
.directive('myDialog', function() {
  return {
    restrict: 'E',
    transclude: true,
    scope: {},
    templateUrl: 'my-dialog.html',
    link: function (scope, element) {
      scope.name = 'Jeff';
    }
  };
});
------------
<div class="alert" ng-transclude>
</div>
------------
<div ng-controller="Controller">
  <my-dialog>Check out the contents, {{name}}!</my-dialog>
</div>

Ordinarily, we would expect that {{name}} would be Jeff. 
按理来说，我们以为name会显示为Jeff。
However, we see in this example that the {{name}} binding is still Tobias.
然而，在这个例子里，我们看到name还是和Tobias绑定在一起了。

The transclude option changes the way scopes are nested. 
transclude选项改变了scope嵌套的方式。
It makes it so that the contents of a transcluded directive have whatever scope is outside the directive, 
它使得tansclude指令的内容使用的是外部scope，
rather than whatever scope is on the inside. 
而不是内部scope。
In doing so, it gives the contents access to the outside scope.
所以，它给予了内容访问外部作用域的权限。

Note that if the directive did not create its own scope, 
注意如果指令没有创建它自己的作用域，
then scope in scope.name = 'Jeff'; would reference the outside scope and we would see Jeff in the output.
scope.name='jeff'这句语句所使用的scope将会引用外部作用域，使得显示为Jeff。

This behavior makes sense for a directive that wraps some content, 
这个特性使得包含内容的指令变得有意义，
because otherwise you'd have to pass in each model you wanted to use separately. 
If you have to pass in each model that you want to use, 
then you can't really have arbitrary contents, can you?
（上面三句不知道怎么翻译）

Best Practice: only use transclude: true when you want to create a directive that wraps arbitrary content.
最佳实践：只有在你想要创建一个可以包含任意内容的指令时，才使用tranclude:true。
Next, we want to add buttons to this dialog box, and allow someone using the directive to bind their own behavior to it.
接下来，我们要给对话框添加一个按钮，并且允许别人在指令上绑定他们的自定义行为。
angular.module('docsIsoFnBindExample', [])
.controller('Controller', ['$scope', '$timeout', function($scope, $timeout) {
  $scope.name = 'Tobias';
  $scope.message = '';
  $scope.hideDialog = function (message) {
    $scope.message = message;
    $scope.dialogIsHidden = true;
    $timeout(function () {
      $scope.message = '';
      $scope.dialogIsHidden = false;
    }, 2000);
  };
}])
.directive('myDialog', function() {
  return {
    restrict: 'E',
    transclude: true,
    scope: {
      'close': '&onClose'
    },
    templateUrl: 'my-dialog-close.html'
  };
});
---------
<div class="alert">
  <a href class="close" ng-click="close({message: 'closing for now'})">&times;</a>
  <div ng-transclude></div>
</div>
----------
<div ng-controller="Controller">
  {{message}}
  <my-dialog ng-hide="dialogIsHidden" on-close="hideDialog(message)">
    Check out the contents, {{name}}!
  </my-dialog>
</div>

We want to run the function we pass by invoking it from the directive's scope, 
but have it run in the context of the scope where it's registered.
（上面两句不知道怎么翻译）

We saw earlier how to use =attr in the scope option, but in the above example, we're using &attr instead. 
我们先前看到了怎么在scope选项里使用=attr，但是在上面的例子里，我们使用了&attr。
The & binding allows a directive to trigger evaluation of an expression in the context of the original scope, at a specific time. 
&符号允许指令在特定时间去触发位于原始作用域的上下文里的表达式，
Any legal expression is allowed, including an expression which contains a function call. 
任何合法的表达式都可以，包括包含方法调用的表达式。
Because of this, & bindings are ideal for binding callback functions to directive behaviors.
所以，&绑定成为了绑定指令的回调函数的理想的地方。

When the user clicks the x in the dialog, the directive's close function is called, thanks to ng-click. 
因为有ng-click存在，当你点击对话框里的x时，指令的关闭方法被调用。
This call to close on the isolated scope actually evaluates the expression hideDialog(message) in the context of the original scope, 
它调用了隔离作用域里的close，然后调用了原始作用域上下文里的hideDialog(message)表达式，
thus running Controller's hideDialog function.
从而运行了控制器里的hideDialog方法。

Often it's desirable to pass data from the isolate scope via an expression to the parent scope,
这个特性适合于从隔离作用域里通过表达式传递数据到父级作用域里，
this can be done by passing a map of local variable names and values into the expression wrapper fn. 
（不会翻译）
For example, the hideDialog function takes a message to display when the dialog is hidden. 
比如，当对话框隐藏时，hideDialog方法获得了一条提示并把它显示了出来。
This is specified in the directive by calling close({message: 'closing for now'}). 
这是定义在在指令中并通过调用close({message: 'closing for now'})来实现的。
Then the local variable message will be available within the on-close expression.
然后，本地变量提示信息会通过on-close表达式显示出来。

Best Practice: use &attr in the scope option when you want your directive to expose an API for binding to behaviors.
最佳实践：当你想要你的指令暴露出api来绑定行为时，就使用&attr作用域选项。

Creating a Directive that Adds Event Listeners
创建添加了事件监听器的指令
Previously, we used the link function to create a directive that manipulated its DOM elements. 
先前，我们使用了link去创建可以操纵DOM元素的指令。
Building upon that example, let's make a directive that reacts to events on its elements.
基于那个例子，我们来创建可以响应元素上的事件的指令。

For instance, what if we wanted to create a directive that lets a user drag an element?
比如，创建一个可以让用户拖曳元素的指令
angular.module('dragModule', [])
.directive('myDraggable', ['$document', function($document) {
  return {
    link: function(scope, element, attr) {
      var startX = 0, startY = 0, x = 0, y = 0;

      element.css({
       position: 'relative',
       border: '1px solid red',
       backgroundColor: 'lightgrey',
       cursor: 'pointer'
      });

      element.on('mousedown', function(event) {
        // Prevent default dragging of selected content
        event.preventDefault();
        startX = event.pageX - x;
        startY = event.pageY - y;
        $document.on('mousemove', mousemove);
        $document.on('mouseup', mouseup);
      });

      function mousemove(event) {
        y = event.pageY - startY;
        x = event.pageX - startX;
        element.css({
          top: y + 'px',
          left:  x + 'px'
        });
      }

      function mouseup() {
        $document.off('mousemove', mousemove);
        $document.off('mouseup', mouseup);
      }
    }
  };
}]);
<span my-draggable>Drag ME</span>

Creating Directives that Communicate
创建可以互相沟通的指令（怎么翻译？）
You can compose any directives by using them within templates.
你可以通过在模板中使用指令来组合指令。

Sometimes, you want a component that's built from a combination of directives.
有时，你想要通过指令的组合来创建一个组件

Imagine you want to have a container with tabs in which the contents of the container correspond to which tab is active.
想象你想要一个带有tab的容易，并且tab被选中时，容器会显示响应的内容。
angular.module('docsTabsExample', [])
.directive('myTabs', function() {
  return {
    restrict: 'E',
    transclude: true,
    scope: {},
    controller: function($scope) {
      var panes = $scope.panes = [];

      $scope.select = function(pane) {
        angular.forEach(panes, function(pane) {
          pane.selected = false;
        });
        pane.selected = true;
      };

      this.addPane = function(pane) {
        if (panes.length === 0) {
          $scope.select(pane);
        }
        panes.push(pane);
      };
    },
    templateUrl: 'my-tabs.html'
  };
})
.directive('myPane', function() {
  return {
    require: '^myTabs',
    restrict: 'E',
    transclude: true,
    scope: {
      title: '@'
    },
    link: function(scope, element, attrs, tabsCtrl) {
      tabsCtrl.addPane(scope);
    },
    templateUrl: 'my-pane.html'
  };
});
----------
<div class="tab-pane" ng-show="selected" ng-transclude>
</div>
----------
<div class="tabbable">
  <ul class="nav nav-tabs">
    <li ng-repeat="pane in panes" ng-class="{active:pane.selected}">
      <a href="" ng-click="select(pane)">{{pane.title}}</a>
    </li>
  </ul>
  <div class="tab-content" ng-transclude></div>
</div>
----------
<my-tabs>
  <my-pane title="Hello">
    <h4>Hello</h4>
    <p>Lorem ipsum dolor sit amet</p>
  </my-pane>
  <my-pane title="World">
    <h4>World</h4>
    <em>Mauris elementum elementum enim at suscipit.</em>
    <p><a href ng-click="i = i + 1">counter: {{i || 0}}</a></p>
  </my-pane>
</my-tabs>

The myPane directive has a require option with value ^myTabs.
myPane指令有一个值为^myTabs的require选项。
When a directive uses this option, $compile will throw an error unless the specified controller is found. 
当指令使用这个选项时，除非指定的控制器存在，否则编译器将抛出异常。
The ^ prefix means that this directive searches for the controller on its parents 
^ 前缀表示让指令在父级元素里面寻找指定的控制器
(without the ^ prefix, the directive would look for the controller on just its own element).
(如果没有 ^ 前缀，指令将在它自己的元素里寻找指定的控制器)。

So where does this myTabs controller come from? 
myTabs控制器从何而来？
Directives can specify controllers using the unsurprisingly named controller option. 
指令可以通过命名约定规范的方式来寻找到指定的控制器。
As you can see, the myTabs directive uses this option. 
正如你所见，myTabs指令就是这样做的。
Just like ngController, this option attaches a controller to the template of the directive.
就像ngController，这个选项把控制器和指令的模板相连接了起来。

If it is necessary to reference the controller or any functions bound to the controller's scope in the template, 
you can use the option controllerAs to specify the name of the controller as an alias. 
The directive needs to define a scope for this configuration to be used. 
This is particularly useful in the case when the directive is used as a component.

Looking back at myPane's definition, notice the last argument in its link function: tabsCtrl.
When a directive requires a controller, it receives that controller as the fourth argument of its link function. 
Taking advantage of this, myPane can call the addPane function of myTabs.

If multiple controllers are required, the require option of the directive can take an array argument. 
The corresponding parameter being sent to the link function will also be an array.
angular.module('docsTabsExample', [])
.directive('myPane', function() {
  return {
    require: ['^myTabs', '^ngModel'],
    restrict: 'E',
    transclude: true,
    scope: {
      title: '@'
    },
    link: function(scope, element, attrs, controllers) {
      var tabsCtrl = controllers[0],
          modelCtrl = controllers[1];

      tabsCtrl.addPane(scope);
    },
    templateUrl: 'my-pane.html'
  };
});

Savvy readers may be wondering what the difference is between link and controller. 
The basic difference is that controller can expose an API, and link functions can interact with controllers using require.

Best Practice: use controller when you want to expose an API to other directives. Otherwise use link.


